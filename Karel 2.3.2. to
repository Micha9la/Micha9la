2.3.3.
void jumpTheHurdles()
{
    while (!onBeeper())
    {
        if (frontIsClear())
        {
            moveForward();
        }
        else
        {
            turnLeft();
            while (!rightIsClear())
            {
                moveForward();
            }
            turnRight();
            moveForward();
            turnRight();
            while (frontIsClear())
            {
                moveForward();
            }  
            turnLeft();  
        }
    }
}

ODER mit neuer Funktion
void jumpTheHurdles()
{
    while (!onBeeper())
    {
        if (frontIsClear())
        {
            moveForward();
        }
        else
        {
            jumpOneHurdle();     
        }
    }
}
void jumpOneHurdle()
{
    turnLeft();
    while (!rightIsClear())
    {
        moveForward();
    }
    turnRight();
    moveForward();
    turnRight();
    while (frontIsClear())
    {
        moveForward();
    }  
    turnLeft();
}




2.3.2.
void findTeddyBear()
{ 
    while (!frontIsClear() && !onBeeper())
    {
        turnLeft();
        
    }
    while (frontIsClear() && !onBeeper())
    {
        moveForward();
        
        while (!frontIsClear() && !onBeeper())
        {
            turnLeft();
            
        } 
    }
}

ODER (damit sitzt Karel ganz am Ende aber nicht so wie er soll)
void findTeddyBear1()
{ 
    while (frontIsClear() && !onBeeper()) {
        moveForward();
        while (!frontIsClear()) {
            turnLeft();
        }
    } 
}
